name: Cross-Platform Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Display Python version
        run: python --version
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install package in development mode
        run: pip install -e .
      
      - name: Verify installation
        run: python -c "from server.__version__ import __version__; print(f'Server version: {__version__}')"
      
      - name: Run basic import test
        run: python -c "import sys; sys.path.insert(0, '.'); from server.main import server; print('Server imported successfully')"
      
      - name: Test server startup (if tests exist)
        run: |
          if [ -d "tests" ] && [ -n "$(ls -A tests/*.py 2>/dev/null)" ]; then
            pip install pytest pytest-asyncio
            pytest tests/ -v
          else
            echo "No tests found, skipping pytest"
          fi
        shell: bash
      
      - name: Test cross-platform path handling
        run: |
          python -c "
          from pathlib import Path
          import os
          
          # Test path operations
          test_path = Path.home() / 'test' / 'document.pdf'
          print(f'Path: {test_path}')
          print(f'Resolved: {test_path.resolve()}')
          
          # Test expanduser
          user_path = os.path.expanduser('~/test.txt')
          print(f'Expanded user path: {user_path}')
          
          print('Path handling tests passed!')
          "
      
      - name: Test encoding handling
        run: |
          python -c "
          import tempfile
          from pathlib import Path
          
          # Test UTF-8 handling
          with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False, suffix='.txt') as f:
              f.write('Test content with UTF-8: café ☕')
              temp_path = f.name
          
          with open(temp_path, 'r', encoding='utf-8') as f:
              content = f.read()
              assert 'café' in content
          
          Path(temp_path).unlink()
          print('Encoding tests passed!')
          "

  build-check:
    name: Build Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel
      
      - name: Build package
        run: python -m build
      
      - name: Verify build artifacts
        run: |
          ls -lh dist/
        shell: bash

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy
      
      - name: Run ruff
        run: ruff check server/ --output-format=github
        continue-on-error: true
      
      - name: Run black check
        run: black --check server/
        continue-on-error: true
      
      - name: Run isort check
        run: isort --check-only server/
        continue-on-error: true


